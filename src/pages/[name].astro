---
import Namelayout from "../layouts/Namelayout.astro";

import flame from "./../assets/flame.svg?raw";
import spa from "./../assets/spa.svg?raw";
import electricbolt from "./../assets/electricbolt.svg?raw";
import waterdrop from "./../assets/waterdrop.svg?raw";
import poison from "./../assets/poison.svg?raw";

const { name } = Astro.params;

let about;
const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${name}`);
if (response.status === 404) {
  return Astro.redirect("/404");
} else {
  about = await response.json();
}

let desc;
if (about.id) {
  try {
    desc = await fetch(
      `https://pokeapi.co/api/v2/pokemon-species/${about.id}`
    ).then((res) => res.json());
  } catch (err) {
    console.error(err);
  }
}

// let evolution
// if (about.id) {
//   try {
//     evolution = await fetch(`https://pokeapi.co/api/v2/evolution-chain/${about.id}`).then(res => res.json())
//   } catch (err) {
//     console.error(err)
//   }
// }
// console.log(JSON.stringify(evolution))
// const secondEvo = evolution.chain.evolves_to[0]
// const thirdEvo = evolution.chain.evolves_to[0]?.evolves_to[0]
// console.log("TADY JE JMENO" , thirdEvo.species.name)
// console.log("TADY JE JMENO" , secondEvo.species.name)

// let evo2, evo3
// if (secondEvo.species.name) {
//   try {
//     evo2 = await fetch(`https://pokeapi.co/api/v2/pokemon/${secondEvo.species.name}`).then(res => res.json())
//   } catch (err) {
//     console.error(err)
//   }
// }
// if (thirdEvo.species.name) {
//   try {
//     evo3 = await fetch(`https://pokeapi.co/api/v2/pokemon/${thirdEvo.species.name}`).then(res => res.json())
//   } catch (err) {
//     console.error(err)
//   }
// }

function convertKgToLb(kg: number): string {
  const lbPerKg = 2.20462;
  const lb = kg * lbPerKg;
  return `${Number(lb.toFixed(1))} lbs (${kg} kg)`;
}
const weight = convertKgToLb(about.weight / 10);

function convertCmToFeetInches(cm: number): string {
  const inchesPerCm = 0.393701;
  const totalInches = cm * inchesPerCm;
  const feet = Math.floor(totalInches / 12);
  const inches = (totalInches % 12).toFixed(1);
  const meters = (cm / 100).toFixed(2);
  return `${feet}'${inches}" (${meters} m)`;
}
const height = convertCmToFeetInches(about.height * 10);

function formatStatName(statName: string): string {
  const formattedName = statName
    .replace("special-attack", "SATK")
    .replace("special-defense", "SDEF")
    .replace("hp", "HP")
    .replace("attack", "ATK")
    .replace("defense", "DEF")
    .replace("speed", "SPD");
  // .replace(/(\b\w)/g, (match) => match.toUpperCase()); //first letter

  return formattedName;
}

let type = about.types[0].type.name;
function typeIcon() {
  switch (type) {
    case "water":
      return waterdrop;
    case "fire":
      return flame;
    case "grass":
      return spa;
    case "electric":
      return electricbolt;
    case "poison":
      return poison;
    default:
      return "";
  }
}
function typeColor() {
  switch (type) {
    case "water":
      return "106, 185, 229";
    case "fire":
      return "240, 128, 48";
    case "grass":
      return "120, 200, 80";
    case "electric":
      return "248, 208, 48";
    case "poison":
      return "160, 64, 160";
    default:
      return "128, 128, 128";
  }
}
const color = typeColor();
---
<Namelayout title={name}>
<script>
const buttons = document.querySelectorAll('.tabs button');
const tabs = document.querySelectorAll('.tab-content');

function setActiveButton(button) {
  buttons.forEach((b) => b.classList.remove('active'));
  button.classList.add('active');
}

function showTab(tab) {
  tabs.forEach((t) => t.classList.remove('active'));
  document.getElementById(tab.dataset.target).classList.add('active');
}

buttons.forEach((button) => {
  button.addEventListener('click', () => {
    setActiveButton(button);
    showTab(button);
  });
});
</script>

  <div id="root">
    <div class="view">
      <img src={about.sprites.other["official-artwork"].front_default} />
    </div>

    <div class="info">
      <div class="name">{about.name}</div>
      <div class="type">
        <span class="typeIcon"><Fragment set:html={typeIcon()} />{type}</span>
      </div>

      <div class="desc">
        {desc.flavor_text_entries[6].flavor_text}
      </div>
      <div class="slider">
        <div class="tabs">
          <button data-target="stats" class="active">Stats</button>
          <button data-target="evolution">Evolution</button>
          <button data-target="moves">Moves</button>
        </div>
        <div class="slides">
          <!-- <div id="About">
        <div>Weight {weight}</div>
        <div>Height {height}</div>
        <div>Abilities {about.abilities.map(p=>(<span>{p.ability.name}</span>))}</div>
      </div> -->
        <div id="stats" class="tab-content active">
            <div class="koks">
            <ul class="statname">
              {about.stats.map((p) => <li>{formatStatName(p.stat.name)}</li>)}
            </ul>
            <ul class="statval">
              {about.stats.map((p) => <li>{p.base_stat}</li>)}
            </ul>
            <ul class="progress-container">
              {
                about.stats.map((p) => (
                  <li>
                    <div>
                      <span
                        class="progess-bar"
                        style={`width: ${p.base_stat}%`}
                      />
                    </div>
                  </li>
                ))
              }
            </ul>
          </div>
          </div>
          <div id="evolution" class="tab-content">
            <div class="kiks">
            <!-- <div class="evoChain"><div class="evo"><img src={about.sprites.front_default} /> {name}</div><div>Level {secondEvo.evolution_details[0].min_level}</div><div class="evo"><img src={evo2.sprites.front_default} /> {secondEvo.species.name}</div></div>
        <div class="evoChain"><div class="evo"><img src={evo2.sprites.front_default} /> {name}</div><div>Level {thirdEvo.evolution_details[0].min_level}</div><div class="evo"><img src={evo3.sprites.front_default} /> {secondEvo.species.name}</div></div> -->
      </div>
          </div>
          <div id="moves" class="tab-content">
            <div>
              {about.moves.map((p) => p.move.name)}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <style lang="scss" define:vars={{ color }}>
    $rgb: rgb(var(--color));
    #root {
      background: $rgb;

      img {
        position: absolute;
        width: min(180px, 360px);
        height: auto;
        top: 25%;
        left: 50%;
        transform: translate(-50%, -75%);
      }
      .name {
        padding: 4rem 0 1rem;
        text-align: center;
        font-size: 3rem;

        &::first-letter {
          text-transform: uppercase;
        }
      }
      .type {
        display: flex;
        justify-content: center;
        font-size: 14px;

        .typeIcon {
          height: 2.5rem;
          border-radius: 25px;
          display: flex;
          padding: 0 2rem 0 0.5rem;
          align-items: center;
          text-transform: uppercase;
          color: white;
          font-weight: bold;
          background: $rgb;
        }
      }
      .view {
        height: 25vh;
      }
    }
    .info {
      height: 75vh;
      background: #fefefe;
      border-radius: 50px 50px 0 0;

      display: flex;
      flex-direction: column;
      overflow-x: hidden;
    }
    .desc {
      margin: 2rem 0;
      padding: 0 0.75rem;
      text-align: center;
    }
    .slider {
      width: clamp(320px, 100%, 468px);
      height: 32vh;

      .tabs {
        display: flex;
        justify-content: center;
        align-items: center;

        button {
          width: 7rem;
          background: transparent;
          border: none;
          color: $rgb;
          padding: .75rem 0;
          text-transform: uppercase;

          &:hover {
            cursor: pointer;
          }
        }
        button.active {
          background: $rgb;
          color: white;
          border-radius: 25px;  
          
        }
      }
    }
    
    .slides {
      margin-top: 1rem;
      display: flex;
      width: 100%;
      height: 100%;

      > div {
        width: 100%;
        padding: 1rem 3rem 0;

      }
      
      .tab-content {
        display: none;
      }

      .tab-content.active {
        display: block;
      }


      .koks {
        
        display: flex;
        gap: 1.5rem;
        font-size: 14px;
        
        ul li {
          height: 1.25rem;
          margin-top: 0.5rem;
        }
        .statname {
          font-weight: 600;
          color: $rgb;
        }
        .progress-container {
          width: 100%;
          
          li {
            width: 100%;
            display: flex;
            align-items: center;
            
            div {
              width: 100%;
              background: #e3e3e3;
              border-radius: 25px;
              
              span {
                display: block;
                border-radius: 25px;
                height: 10px;
                background: linear-gradient(
                  to right,
                  rgba(var(--color), 0.4),
                  $rgb
                  );
                }
              }
            }
        }
      }
      
      .kiks {
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: space-around;
        
        .evoChain {
          width: 100%;
          display: flex;
          justify-content: space-evenly;
          align-items: center;
          
          .evo {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
          }
        }
      }
    }
    </style>
</Namelayout>
