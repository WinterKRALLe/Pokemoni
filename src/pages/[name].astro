---
import Namelayout from "../layouts/Namelayout.astro";

import flame from "./../assets/flame.svg?raw";
import spa from "./../assets/spa.svg?raw";
import electricbolt from "./../assets/electricbolt.svg?raw";
import waterdrop from "./../assets/waterdrop.svg?raw";
import poison from "./../assets/poison.svg?raw";
import normal from "./../assets/normal.svg?raw";
import bug from "./../assets/bug.svg?raw";

const { name } = Astro.params;

let pokemon;
const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${name}`);
if (response.status === 404) {
  return Astro.redirect("/404");
} else {
  pokemon = await response.json();
}

const pokemonSpecies = await fetch(`https://pokeapi.co/api/v2/pokemon-species/${name}`).then((res) => res.json());

const evolution = await fetch(pokemonSpecies.evolution_chain.url).then(res => res.json());

// console.log(JSON.stringify(evolution));

const thirdEvo = evolution.chain.species.name
const firstEvo = evolution.chain.evolves_to[0].species.name
let secondEvo
if (evolution.chain.evolves_to[0] && evolution.chain.evolves_to[0].evolves_to[0] && evolution.chain.evolves_to[0].evolves_to[0].species) {
  secondEvo = evolution.chain.evolves_to[0].evolves_to[0].species.name
}

const secondEvoLevel = evolution.chain.evolves_to[0].evolution_details[0].min_level
let thirdEvoLevel
if (evolution.chain.evolves_to[0] && evolution.chain.evolves_to[0].evolves_to[0] && evolution.chain.evolves_to[0].evolves_to[0].evolution_details[0]) {
  thirdEvoLevel = evolution.chain.evolves_to[0].evolves_to[0].evolution_details[0].min_level
}

// const secondEvoLevel = evolution.chain.evolves_to[0].evolution_details[0].min_level;
// const thirdEvoLevel = evolution.chain.evolves_to[0].evolves_to[0].evolution_details[0].min_level;


// let evo2, evo3
// if (secondEvo.species.name) {
//   try {
//     evo2 = await fetch(`https://pokeapi.co/api/v2/pokemon/${secondEvo.species.name}`).then(res => res.json())
//   } catch (err) {
//     console.error(err)
//   }
// }
// if (thirdEvo.species.name) {
//   try {
//     evo3 = await fetch(`https://pokeapi.co/api/v2/pokemon/${thirdEvo.species.name}`).then(res => res.json())
//   } catch (err) {
//     console.error(err)
//   }
// }

function convertKgToLb(kg: number): string {
  const lbPerKg = 2.20462;
  const lb = kg * lbPerKg;
  return `${Number(lb.toFixed(1))} lbs (${kg} kg)`;
}
const weight = convertKgToLb(pokemon.weight / 10);

function convertCmToFeetInches(cm: number): string {
  const inchesPerCm = 0.393701;
  const totalInches = cm * inchesPerCm;
  const feet = Math.floor(totalInches / 12);
  const inches = (totalInches % 12).toFixed(1);
  const meters = (cm / 100).toFixed(2);
  return `${feet}'${inches}" (${meters} m)`;
}
const height = convertCmToFeetInches(pokemon.height * 10);

function formatStatName(statName: string): string {
  const formattedName = statName
    .replace("special-attack", "SATK")
    .replace("special-defense", "SDEF")
    .replace("hp", "HP")
    .replace("attack", "ATK")
    .replace("defense", "DEF")
    .replace("speed", "SPD");
  // .replace(/(\b\w)/g, (match) => match.toUpperCase()); //first letter

  return formattedName;
}

let type = pokemon.types[0].type.name;
function typeIcon() {
  switch (type) {
    case "water":
      return waterdrop;
    case "fire":
      return flame;
    case "grass":
      return spa;
    case "electric":
      return electricbolt;
    case "poison":
      return poison;
    case "normal":
      return normal
    case "bug":
      return bug
    default:
      return "";
  }
}
function typeColor() {
  switch (type) {
    case "water":
      return "84, 158, 222";
    case "fire":
      return "240, 128, 48";
    case "grass":
      return "120, 200, 80";
    case "electric":
      return "248, 208, 48";
    case "poison":
      return "160, 64, 160";
    case "normal":
      return "168, 168, 120"
    case "bug":
      return "168, 184, 32"
    default:
      return "128, 128, 128";
  }
}
const color = typeColor();
---
<Namelayout title={name}>

<script>
const buttons = document.querySelectorAll('.tabs button');
const tabs = document.querySelectorAll('.tab-content');

function setActiveButton(button) {
  buttons.forEach((b) => b.classList.remove('active'));
  button.classList.add('active');
}

function showTab(tab) {
  tabs.forEach((t) => t.classList.remove('active'));
  document.getElementById(tab.dataset.target).classList.add('active');
}

buttons.forEach((button) => {
  button.addEventListener('click', () => {
    setActiveButton(button);
    showTab(button);
  });
});
</script>
<div id="ma">
  <div id="root">
    <div class="view">
      <img src={pokemon.sprites.other["official-artwork"].front_default} />
    </div>

    <div class="info">
      <div class="intro">
      <div class="name">{pokemon.name}</div>
      <div class="type">
        <span class="typeIcon"><Fragment set:html={typeIcon()} />{type}</span>
      </div>
      
      <div class="desc">
        {pokemonSpecies.flavor_text_entries[6].flavor_text}
      </div>
    </div>
      <div class="tabs">
        <button data-target="stats" class="active">Stats</button>
        <button data-target="evolution">Evolutions</button>
        <button data-target="moves">Moves</button>
      </div>
      <div class="slider">
        <div class="slides">
          <!-- <div id="pokemona">
        <div>Weight {weight}</div>
        <div>Height {height}</div>
        <div>Abilities {pokemon.abilities.map(p=>(<span>{p.ability.name}</span>))}</div>
      </div> -->
        <div id="stats" class="tab-content active">
            <div class="koks">
            <ul class="statname">
              {pokemon.stats.map((p) => <li>{formatStatName(p.stat.name)}</li>)}
            </ul>
            <ul class="statval">
              {pokemon.stats.map((p) => <li>{p.base_stat}</li>)}
            </ul>
            <ul class="progress-container">
              {
                pokemon.stats.map((p) => (
                  <li>
                    <div>
                      <span
                        class="progess-bar"
                        style={`width: ${p.base_stat}%`}
                      />
                    </div>
                  </li>
                ))
              }
            </ul>
          </div>
          </div>
          <div id="evolution" class="tab-content">
            <div class="kiks">
              <div>
                {thirdEvo} {secondEvoLevel} {firstEvo}
              </div>
              { secondEvo ? 
              <div>
                {firstEvo} {thirdEvoLevel} {secondEvo}
              </div>
              :
              null
            }
            <!-- <div class="evoChain"><div class="evo"><img src={pokemon.sprites.front_default} /> {name}</div><div>Level {secondEvo.evolution_details[0].min_level}</div><div class="evo"><img src={evo2.sprites.front_default} /> {secondEvo.species.name}</div></div>
        <div class="evoChain"><div class="evo"><img src={evo2.sprites.front_default} /> {name}</div><div>Level {thirdEvo.evolution_details[0].min_level}</div><div class="evo"><img src={evo3.sprites.front_default} /> {secondEvo.species.name}</div></div> -->
      </div>
          </div>
          <div id="moves" class="tab-content">
            <div>
              {pokemon.moves.map((p) => p.move.name)}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<style lang="scss" define:vars={{ color }}>
$rgb: rgb(var(--color));
#ma {
  background: linear-gradient(to bottom, rgba(var(--color), 0.5), $rgb);
}
#root {
  max-width: 1200px;
  margin: 0 auto;

  .view {
    height: 25vh;
  }

  .type {
    display: flex;
    justify-content: center;
    font-size: 14px;

    .typeIcon {
      height: 2.5rem;
      border-radius: 25px;
      display: flex;
      padding: 0 2rem 0 0.5rem;
      align-items: center;
      text-transform: uppercase;
      color: white;
      font-weight: bold;
      background: $rgb;
      box-shadow: rgba(var(--color), 0.7) 0px 0px 10px;
    }
  }
}
img {
  position: relative;
  height: calc(100vh - 75vh);
  display: block;
  margin-inline: auto;
  top: 2rem;
}

.info {
  height: 75vh;
  overflow-x: hidden;
  overflow-y: auto;
  background: #fefefe;
  border-radius: 50px 50px 0 0;

  display: flex;
  flex-direction: column;

  .name {
    font-size: 3rem;
    padding: 2rem 0 1rem;
    text-align: center;

    &::first-letter {
      text-transform: uppercase;
    }
  }

  .tabs {
    padding-bottom: 0.5rem;
    display: flex;
    justify-content: center;
    align-items: center;

    button {
      width: 7rem;
      background: transparent;
      border: none;
      color: $rgb;
      padding: 0.75rem 0;
      text-transform: uppercase;

      &:hover {
        cursor: pointer;
      }
    }
    button.active {
      background: $rgb;
      color: white;
      border-radius: 25px;
      box-shadow: rgba(var(--color), 0.7) 0px 0px 10px;
    }
  }
}
.desc {
  margin: 2rem 0;
  padding-inline: 0.75rem;
  text-align: center;
}
.slider {
  width: clamp(320px, 100%, 500px);
  height: calc(100% - 1rem);
  display: block;
  margin: 0 auto;
  overflow: hidden;
}

.slides {
  display: flex;
  width: 100%;
  height: 100%;
  overflow-x: hidden;

  > div {
    overflow-y: visible;
    width: 100%;
    padding: 0.5rem 2rem;
  }

  .tab-content {
    display: none;
  }

  .tab-content.active {
    display: block;
  }

  .koks {
    display: flex;
    gap: 1.5rem;
    font-size: 14px;

    ul li {
      height: 1.25rem;
      margin-top: 0.5rem;
    }
    .statname {
      font-weight: 600;
      color: $rgb;
    }
    .progress-container {
      width: 100%;

      li {
        width: 100%;
        display: flex;
        align-items: center;

        div {
          width: 100%;
          background: #e3e3e3;
          border-radius: 25px;

          span {
            display: block;
            border-radius: 25px;
            height: 10px;
            background: linear-gradient(
              to right,
              rgba(var(--color), 0.4),
              $rgb
            );
          }
        }
      }
    }
  }

  .kiks {
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-around;

    .evoChain {
      width: 100%;
      display: flex;
      justify-content: space-evenly;
      align-items: center;

      .evo {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
      }
    }
  }
}
#root {
  @media only screen and (min-width: 768px) {
    display: flex;
    height: 100vh;

    .view {
      height: 100%;
      width: 20vw;

      img {
        position: absolute;
        width: calc(100vw - 70vw);
        height: auto;
        top: 50%;
        transform: translateY(-50%);

        @media only screen and (min-height: 678px) {
          width: clamp(280px, 35%, 440px);
          height: auto;
        }
      }
    }

    .info {
      height: 100%;
      width: 80vw;
      border-radius: 50px 0 0 50px;
      padding-left: 4rem;
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
      overflow-y: hidden;

      @media only screen and (min-width: 1200px) {
        border-radius: 50px;
      }

      .intro {
        width: 25vw;
        height: calc(100% - 1rem);
        display: flex;
        flex-direction: column;
        justify-content: flex-start;

        .desc {
          height: 100%;
          overflow-y: auto;
          padding: 0;
          margin: 1rem 0;
        }
      }

      .tabs {
        margin-left: 2rem;
        display: flex;
        flex-direction: column;
      }

      .slider {
        .slides {
          display: flex;
          justify-content: center;
          align-items: center;
        }
      }

      @media only screen and (min-height: 678px) {
        flex-direction: column;
        justify-content: center;
        padding-right: 2rem;

        .view {
        }

        .intro {
          height: auto;
          width: auto;

          .desc {
            margin: 2rem 0;
          }
        }

        .tabs {
          flex-direction: row;
          margin: 0;
        }

        .slider {
          height: 40vh;

          .slides {
            align-items: flex-start;
          }
        }
      }
    }
  }
}

</style>
</Namelayout>
