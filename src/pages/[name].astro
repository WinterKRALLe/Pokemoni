---
import Namelayout from "../layouts/Namelayout.astro";
import Stats from "../components/Stats.astro";
import Evolution from "../components/Evolution.astro";
import Weaknesses from "../components/Weaknesses.astro";

import { typeColor, typeIcon } from "./../switches/color_icon";

import { fetchPokemon, fetchSpecies } from "../api/fetch";
import Tabs from "../components/Tabs.astro";
import Biometrics from "../components/Biometrics.astro";
import Artwork from "../components/Artwork.astro";
import Intro from "../components/Intro.astro";

const { name } = Astro.params;

const pokemon = await fetchPokemon(name);
if (pokemon === 404) return Astro.redirect("/404");

const pokemonSpecies = await fetchSpecies(name);
if (pokemonSpecies === 404) console.log("nejde");
// console.log(JSON.stringify(pokemonSpecies));

function convertKgToLb(kg: number): string {
  const lbPerKg = 2.20462;
  const lb = kg * lbPerKg;
  return `<span>${Number(lb.toFixed(1))} lbs</span><span>(${kg} kg)</span>`;
}
const weight = convertKgToLb(pokemon.weight / 10);

function convertCmToFeetInches(cm: number): string {
  const inchesPerCm = 0.393701;
  const totalInches = cm * inchesPerCm;
  const feet = Math.floor(totalInches / 12);
  const inches = (totalInches % 12).toFixed(1);
  const meters = (cm / 100).toFixed(2);
  return `<span>${feet}' ${inches}"</span><span>(${meters} m)</span>`;
}
const height = convertCmToFeetInches(pokemon.height * 10);

let type = pokemon.types[0].type.name;

const color = typeColor(type);
const icon = typeIcon(type);

const image = pokemon.sprites.other["official-artwork"].front_default;

let secondType, secondTypeIcon, secondTypeColor;
if (type && pokemon.types[1]?.type.name) {
  secondType = pokemon.types[1].type.name;
  secondTypeColor = typeColor(secondType);
  secondTypeIcon = typeIcon(secondType);
}
---

<Namelayout title={name}>
  <div
    class="flex flex-col max-w-screen-3xl w-full h-full absolute top-0 bottom-0 left-1/2 -translate-x-1/2"
  >
    <div id="bg" class="w-full absolute -z-10">
      <div
        class="h-[30vh] z-10 rounded-[0_0_50%_50%_/_94%_94%_6%_6%] lg:hidden"
        style=`background: linear-gradient(rgba(${color}, 0.7), rgb(${color}))`
      >
      </div>
      <div
        class="h-[15vh] z-10 rounded-[94%_94%_6%_6%/_0_0_50%_50%] hidden lg:block"
        style=`background: linear-gradient(rgba(${color}, 0.7), rgb(${color}))`
      >
      </div>
    </div>
    <a
      href="/"
      class="text-[#fefefe] block my-4 ml-4 text-base font-semibold hover:underline"
      >&larr; Pokedex</a
    >
    <div class="lg:flex lg:flex-col lg:m-6 lg:mt-0 lg:gap-8">
      <div class='w-full"'>
        <Intro name={pokemon.name} id={pokemon.id} color={color} />
      </div>
      <main class="lg:flex lg:w-full lg:h-auto lg:gap-8">
        <aside
          class="lg:w-full lg:flex lg:flex-col hidden lg:justify-center lg:flex-1"
        >
          <div class="w-full lg-box h-full">
            <Weaknesses type={type} />
          </div>
        </aside>
        <div class="lg:flex lg:flex-col lg:w-full flex-1 lg:gap-8">
          <div
            class="lg:relative lg:w-full lg:h-auto lg:block lg:mx-auto lg:max-w-md"
          >
            <div
              class="lg:absolute lg:top-0 lg:left-0 lg:bottom-0 lg:right-0 lg:border-4 lg:border-solid lg:rounded-full"
              style={`border-color: rgb(${color})`}
            >
            </div>
            <div
              class="lg:absolute lg:top-3 lg:left-3 lg:bottom-3 lg:right-3 lg:border-2 lg:border-solid lg:rounded-full"
              style={`border-color: rgba(${color}, 0.4)`}
            >
            </div>
            <div
              class="lg:absolute lg:top-1 lg:left-1 lg:bottom-1 lg:right-1 lg:border-4 lg:border-dotted lg:rounded-full lg:animate-spin-slow"
              style={`border-color: rgba(${color}, 0.7)`}
            >
            </div>

            <Artwork image={image} />
          </div>
          <div class="lg-box w-full max-w-md h-fit lg:block mx-auto hidden">
            <Biometrics
              color={color}
              secondTypeColor={secondTypeColor}
              type={type}
              secondType={secondType}
              icon={icon}
              secondTypeIcon={secondTypeIcon}
              weight={weight}
              height={height}
            />
          </div>
        </div>
        <div class="block lg:hidden">
          <Biometrics
            color={color}
            secondTypeColor={secondTypeColor}
            type={type}
            secondType={secondType}
            icon={icon}
            secondTypeIcon={secondTypeIcon}
            weight={weight}
            height={height}
          />
        </div>
        <aside
          class="lg:w-full hidden lg:flex lg:items-center lg-box lg:flex-1 lg:p-0"
        >
          <div class="p-12 text-base">
            {pokemonSpecies.flavor_text_entries[0]?.flavor_text}
            {pokemonSpecies.flavor_text_entries[3]?.flavor_text}
            {pokemonSpecies.flavor_text_entries[4]?.flavor_text}
            {pokemonSpecies.flavor_text_entries[5]?.flavor_text}
            {pokemonSpecies.flavor_text_entries[6]?.flavor_text}
          </div>
        </aside>
        <div class="px-3 mt-4 mb-8 lg:hidden block">
          {pokemonSpecies.flavor_text_entries[6]?.flavor_text}
        </div>
      </main>

      <footer class="block lg:hidden">
        <Tabs
          pokemon={pokemon}
          pokemonSpecies={pokemonSpecies}
          color={color}
          type={type}
        />
      </footer>

      <footer class="hidden lg:flex lg:gap-8 w-full">
        <div class="w-1/2 lg-box">
          <Stats color={color} pokeData={pokemon} />
        </div>
        <div class="w-1/2 lg-box">
          <Evolution pokemonSpecies={pokemonSpecies} />
        </div>
      </footer>
    </div>
  </div>
</Namelayout>
