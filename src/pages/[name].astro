---
import Namelayout from "../layouts/Namelayout.astro";

import { typeColor, typeIcon } from "./../switches/color_icon"

import { fetchPokemon, fetchSpecies } from "../api/fetch";

const { name } = Astro.params;

const pokemon = await fetchPokemon(name)
if (pokemon === 404) return Astro.redirect("/404")

const pokemonSpecies = await fetchSpecies(name)

const evolution = await fetch(pokemonSpecies.evolution_chain.url).then(res => res.json());

let firstEvo, secondEvo, thirdEvo
let firstEvolutionPokemon, secondEvolutionPokemon, thirdEvolutionPokemon
let secondEvoLevel, thirdEvoLevel
if (evolution) {
firstEvo = evolution.chain.species.name
secondEvo = evolution.chain.evolves_to[0].species.name
firstEvolutionPokemon = await fetchPokemon(firstEvo)
secondEvolutionPokemon = await fetchPokemon(secondEvo)
if (evolution.chain.evolves_to[0] && evolution.chain.evolves_to[0].evolves_to[0] && evolution.chain.evolves_to[0].evolves_to[0].species) {
  thirdEvo = evolution.chain.evolves_to[0].evolves_to[0].species.name
  thirdEvolutionPokemon = await fetchPokemon(thirdEvo)
}

secondEvoLevel = evolution.chain.evolves_to[0].evolution_details[0].min_level
if (evolution.chain.evolves_to[0] && evolution.chain.evolves_to[0].evolves_to[0] && evolution.chain.evolves_to[0].evolves_to[0].evolution_details[0]) {
  thirdEvoLevel = evolution.chain.evolves_to[0].evolves_to[0].evolution_details[0].min_level
}

}


function convertKgToLb(kg: number): string {
  const lbPerKg = 2.20462;
  const lb = kg * lbPerKg;
  return `<span>${Number(lb.toFixed(1))} lbs</span><span>(${kg} kg)</span>`;
}
const weight = convertKgToLb(pokemon.weight / 10);

function convertCmToFeetInches(cm: number):string {
  const inchesPerCm = 0.393701;
  const totalInches = cm * inchesPerCm;
  const feet = Math.floor(totalInches / 12);
  const inches = (totalInches % 12).toFixed(1);
  const meters = (cm / 100).toFixed(2);
  return `<span>${feet}' ${inches}"</span><span>(${meters} m)</span>`;
}
const height = convertCmToFeetInches(pokemon.height * 10);

function formatStatName(statName: string): string {
  const formattedName = statName
    .replace("special-attack", "SATK")
    .replace("special-defense", "SDEF")
    .replace("hp", "HP")
    .replace("attack", "ATK")
    .replace("defense", "DEF")
    .replace("speed", "SPD");
  // .replace(/(\b\w)/g, (match) => match.toUpperCase()); //first letter

  return formattedName;
}
let type = pokemon.types[0].type.name;
const color = typeColor(type)
const icon = typeIcon(type)

let secondType, secondTypeIcon, secondTypeColor
if (type && pokemon.types[1]?.type.name) {
  secondType = pokemon.types[1].type.name;
  secondTypeColor = typeColor(secondType)
  secondTypeIcon = typeIcon(secondType)
}

---
<Namelayout title={name}>
<script>
const buttons = document.querySelectorAll('.tabs button');
const tabs = document.querySelectorAll('.tab-content');

function setActiveButton(button) {
  buttons.forEach((b) => b.classList.remove('active'));
  button.classList.add('active');
}

function showTab(tab) {
  tabs.forEach((t) => t.classList.remove('active'));
  document.getElementById(tab.dataset.target).classList.add('active');
}

buttons.forEach((button) => {
  button.addEventListener('click', () => {
    setActiveButton(button);
    showTab(button);
  });
});
</script>


<div id="bg">
  <div></div>
</div>

<div class="pokemon">

  <div class="eww">
    <div class="name">{pokemon.name}</div>
    <div class="id">#{pokemon.id}</div>
  </div>

  <div class="pic">
    <img src={pokemon.sprites.other["official-artwork"].front_default} />
  </div>

  <div class="type">
    <span class="typeIcon"><Fragment set:html={icon} />{type}</span>
    { secondTypeColor 
      ? <span class="typeIcon"><Fragment set:html={secondTypeIcon} />{secondType}</span>
      : null
    }
  </div>

  <div class="abilities">
    <div class="ability"><Fragment set:html={weight}/><span>Weight</span></div>
    <div class="line" />
    <div class="ability"><Fragment set:html={height}/><span>Height</span></div>
  </div>

  <div class="desc">
    {pokemonSpecies.flavor_text_entries[6].flavor_text}
  </div>

  <div class="tabs">
    <button data-target="stats" class="active">Stats</button>
    <button data-target="evolution">Evolutions</button>
    <button data-target="moves">Moves</button>
  </div>

  <div class="slider">
    <div class="slides">

      <section id="stats" class="tab-content active">
        <div class="koks">
          <ul class="statname">
            {pokemon.stats.map((p) => <li>{formatStatName(p.stat.name)}</li>)}
          </ul>
          <ul class="statval">
            {pokemon.stats.map((p) => <li>{p.base_stat}</li>)}
          </ul>
          <ul class="progress-container">
            {
              pokemon.stats.map((p) => (
                <li>
                  <div>
                    <span
                      class="progess-bar"
                      style={`width: ${p.base_stat / 1.75}%`}
                    />
                  </div>
                </li>
              ))
            }
          </ul>
        </div>
      </section>
      
      <section id="evolution" class="tab-content">
        <div class="kiks">
          <div>
            <div class="evoChain">
              <div class="evo">
                <img src={firstEvolutionPokemon.sprites.other.dream_world.front_default} />
                { firstEvo }
              </div>
              <div>Level { secondEvoLevel }</div>
              <div class="evo">
                <img src={secondEvolutionPokemon.sprites.other.dream_world.front_default} />
                { secondEvo }
              </div>
            </div>
          </div>
          { thirdEvo
          ? <div>
              <div class="evoChain">
                <div class="evo">
                  <img src={secondEvolutionPokemon.sprites.other.dream_world.front_default} />
                  {secondEvo}
                </div>
                <div>Level { thirdEvoLevel }</div>
                <div class="evo">
                  <img src={thirdEvolutionPokemon.sprites.other.dream_world.front_default} /> 
                  { thirdEvo }
                </div>
              </div>
            </div>
          : null
          }
        </div>
      </section>

      <section id="moves" class="tab-content">
        <div>
          {pokemon.moves.map((p) => p.move.name)}
        </div>
      </section>

    </div>
  </div>

</div>


<style lang="scss" define:vars={{ color, secondTypeColor }}>
$rgb: rgb(var(--color));
$secondRgb: rgb(var(--secondTypeColor));

#bg {
  height: 100%;
  width: 100vw;
  position: absolute;
  z-index: -10;
  background: #fefefe;

  > div {
    height: 30vh;
    background: linear-gradient(rgba(var(--color), 0.7), $rgb);
    border-radius: 0 0 50% 50% / 94% 94% 6% 6%;
    z-index: 10;
  }
}

.pokemon {
  // max-width: 1200px;
  // margin: 0 auto;

  display: flex;
  flex-direction: column;
  justify-content: space-evenly;

  .eww {
    display: flex;
    align-items: flex-end;
    justify-content: space-between;
    color: #fefefe;

    .id {
      padding: 0 1rem 0 0;
    }

    .name {
      font-size: 3rem;
      padding: 1rem 0 0 1rem;
      font-weight: 500;
      letter-spacing: -2px;
      
      &::first-letter {
        text-transform: uppercase;
      }
    }
  }

  .pic {
    display: block;
    height: 25vh;
    
    img {
      height: 100%;
      width: auto;
      display: block;
      margin-inline: auto;
    }
  }

  .type {
    display: flex;
    justify-content: center;
    font-size: 14px;
  
    .typeIcon {
      height: 2.5rem;
      border-radius: 25px;
      display: flex;
      padding: 0 2rem 0 0.5rem;
      align-items: center;
      text-transform: uppercase;
      color: white;
      font-weight: bold;
      box-shadow: rgba(var(--color), 0.7) 0px 0px 10px;
      background: $rgb;
      
      &:nth-child(2) {
        background: $secondRgb;
      }
    }
  }

  .abilities {
    display: flex;
    justify-content: center;
    gap: 2rem;
    text-align: center;
    margin: 2rem 0 1rem;
    
    .line {
      height: auto;
      width: 2px;
      background: gray;
    }
  
    .ability {
      display: flex;
      flex-direction: column;
  
      span {
        padding-top: .5rem;
        font-size: 0.75rem;
        color: #707070;
      }
    }
  }

  .desc {
    padding-inline: 0.75rem;
    text-align: center;
    margin: 1rem 0 2rem;
  }

  .tabs {
    margin-bottom: 0.5rem;
    display: flex;
    justify-content: center;
    align-items: center;

    button {
      width: 7rem;
      background: transparent;
      border: none;
      color: $rgb;
      padding: 0.5rem 0;
      text-transform: uppercase;

      &:hover {
        cursor: pointer;
      }
    }
    button.active {
      background: $rgb;
      color: white;
      border-radius: 25px;
      box-shadow: rgba(var(--color), 0.7) 0px 0px 10px;
    }
  }
  
  .slider {
    width: 100%;
    height: calc(100% - 1rem);
    display: block;
    margin-inline: auto;
    overflow: hidden;



  }

}


#stats {
  width: 100%;
}

.slides {
  display: flex;
  width: 100%;
  height: 100%;
  overflow-x: hidden;

  section {
    overflow-y: visible;
    width: 100%;
    padding: 0.5rem 1rem;
  }

  .tab-content {
    display: none;
  }

  .tab-content.active {
    display: block;
  }

  .koks {
    display: flex;
    gap: 1rem;
    font-size: 14px;

    ul li {
      height: 1.25rem;
      margin-top: 0.5rem;
    }
    .statname {
      font-weight: 600;
      color: $rgb;
    }
    .statval {
      align-items: center;
    }
    .progress-container {
      width: 100%;

      li {
        width: 100%;
        display: flex;
        align-items: center;

        div {
          width: 100%;
          background: #e3e3e3;
          border-radius: 25px;

          span {
            display: block;
            border-radius: 25px;
            height: 10px;
            background: linear-gradient(
              to right,
              rgba(var(--color), 0.4),
              $rgb
            );
          }
        }
      }
    }
  }

  .kiks {
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-around;

    .evoChain {
      width: 100%;
      display: flex;
      justify-content: space-evenly;
      align-items: center;

      .evo {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
      }
    }
  }
}

</style>
</Namelayout>
