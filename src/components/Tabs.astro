---
import Stats from "./Stats.astro";
import Evolution from "./Evolution.astro";
import Moves from "./Moves.astro";

const { pokemon, pokemonSpecies, color } = Astro.props;
---

<div class="flex flex-wrap justify-center px-8 gap-4 bg-[#fefefe]">
    <input type="radio" name="tabs" id="tabStats" checked class="hidden" />
    <label
        for="tabStats"
        class="w-1/4 py-2 px-4 uppercase font-semibold mb-3 flex justify-center items-center hover:cursor-pointer"
        >Stats</label
    >
    <section id="Stats" class="order-1 w-full hidden">
        <Stats color={color} pokeData={pokemon} />
    </section>

    <input type="radio" name="tabs" id="tabEvo" class="hidden" />
    <label
        for="tabEvo"
        class="w-1/3 py-2 px-4 uppercase font-semibold mb-3 flex justify-center items-center hover:cursor-pointer"
        >Evolutions</label
    >
    <section id="Evolution" class="order-1 w-full hidden">
        <Evolution pokemonSpecies={pokemonSpecies} />
    </section>

    <input type="radio" name="tabs" id="tabMoves" class="hidden" />
    <label
        for="tabMoves"
        class="w-1/4 py-2 px-4 uppercase font-semibold mb-3 flex justify-center items-center hover:cursor-pointer"
        >Moves</label
    >
    <section id="Moves" class="order-1 w-full hidden">
        <Moves pokeData={pokemon} />
    </section>
</div>

<script>
    const currentSlideClass = "selected";
    const carousels = document.querySelectorAll(".carousel");

    carousels.forEach((carousel) => {
        const slides = [...carousel.querySelectorAll(".carouselSlide")];
        const prevBtn = carousel.querySelector(".carouselbtnleft");
        const nextBtn = carousel.querySelector(".carouselbtnright");

        nextBtn.addEventListener("click", () =>
            changeCurrentSlide(slides, true)
        );

        prevBtn.addEventListener("click", () =>
            changeCurrentSlide(slides, false)
        );
    });

    function switchSlides(oldSlide, newSlide) {
        oldSlide.classList.remove(currentSlideClass);
        newSlide.classList.add(currentSlideClass);

        newSlide.scrollIntoView({
            block: "nearest",
            behavior: "smooth",
            inline: "end",
        });
    }

    function getNextSlide(slides, predictedNextSlideIndex) {
        if (predictedNextSlideIndex < 0) {
            return slides[slides.length - 1];
        }

        if (predictedNextSlideIndex > slides.length - 1) {
            return slides[0];
        }

        return slides[predictedNextSlideIndex];
    }

    function changeCurrentSlide(slides, forward) {
        slides.every((slide, index) => {
            const isCurrentSlide = slide.classList.contains(currentSlideClass);

            if (isCurrentSlide) {
                const predictedNextSlideIndex = forward ? index + 1 : index - 1;
                const nextSlide = getNextSlide(slides, predictedNextSlideIndex);

                switchSlides(slide, nextSlide);

                return false;
            } else {
                return true;
            }
        });
    }
</script>

<style lang="css" define:vars={{ color }}>
    input[type="radio"]:checked + label {
        background: rgb(var(--color));
        color: white;
        border-radius: 25px;
        box-shadow: rgba(var(--color), 0.7) 0px 0px 10px;
        transition: 0.2s;
    }

    input[type="radio"]:checked + label + section {
        display: initial;
    }
</style>
